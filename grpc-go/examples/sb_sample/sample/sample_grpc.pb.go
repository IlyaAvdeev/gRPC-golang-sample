// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sample

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WizardClient is the client API for Wizard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WizardClient interface {
	WhatIsAgeOf(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*UserInfo, error)
}

type wizardClient struct {
	cc grpc.ClientConnInterface
}

func NewWizardClient(cc grpc.ClientConnInterface) WizardClient {
	return &wizardClient{cc}
}

func (c *wizardClient) WhatIsAgeOf(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/sample.Wizard/WhatIsAgeOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WizardServer is the server API for Wizard service.
// All implementations must embed UnimplementedWizardServer
// for forward compatibility
type WizardServer interface {
	WhatIsAgeOf(context.Context, *UserName) (*UserInfo, error)
	mustEmbedUnimplementedWizardServer()
}

// UnimplementedWizardServer must be embedded to have forward compatible implementations.
type UnimplementedWizardServer struct {
}

func (UnimplementedWizardServer) WhatIsAgeOf(context.Context, *UserName) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhatIsAgeOf not implemented")
}
func (UnimplementedWizardServer) mustEmbedUnimplementedWizardServer() {}

// UnsafeWizardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WizardServer will
// result in compilation errors.
type UnsafeWizardServer interface {
	mustEmbedUnimplementedWizardServer()
}

func RegisterWizardServer(s grpc.ServiceRegistrar, srv WizardServer) {
	s.RegisterService(&Wizard_ServiceDesc, srv)
}

func _Wizard_WhatIsAgeOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServer).WhatIsAgeOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.Wizard/WhatIsAgeOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServer).WhatIsAgeOf(ctx, req.(*UserName))
	}
	return interceptor(ctx, in, info, handler)
}

// Wizard_ServiceDesc is the grpc.ServiceDesc for Wizard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wizard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sample.Wizard",
	HandlerType: (*WizardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhatIsAgeOf",
			Handler:    _Wizard_WhatIsAgeOf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sample/sample.proto",
}
